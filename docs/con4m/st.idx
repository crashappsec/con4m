newListType	con4m/st.html#newListType,Con4mType	st: newListType(contained: Con4mType): Con4mType
newDictType	con4m/st.html#newDictType,Con4mType,Con4mType	st: newDictType(keyType, valType: Con4mType): Con4mType
newTypeVar	con4m/st.html#newTypeVar,set[Con4mTypeKind]	st: newTypeVar(constraints: set[Con4mTypeKind] = {}): Con4mType
newTypeVar	con4m/st.html#newTypeVar,int	st: newTypeVar(num: int): Con4mType
newProcType	con4m/st.html#newProcType,seq[Con4mType],Con4mType,bool	st: newProcType(params: seq[Con4mType]; retType: Con4mType; va: bool = false): Con4mType
newRootScope	con4m/st.html#newRootScope	st: newRootScope(): CurScopes
getEntry	con4m/st.html#getEntry,Con4mScope,string	st: getEntry(scope: Con4mScope; name: string): Option[STEntry]
addEntry	con4m/st.html#addEntry,Con4mScope,string,Option[Con4mNode],bool	st: addEntry(scope: Con4mScope; name: string;\n         firstDef: Option[Con4mNode] = none(Con4mNode); tinfo = newTypeVar();\n         subscope: bool = false): Option[STEntry]
lookup	con4m/st.html#lookup,Con4mScope,string	st: lookup(scope: Con4mScope; name: string): Option[STEntry]
lookupAttr	con4m/st.html#lookupAttr,Con4mScope,string,bool	st: lookupAttr(scope: Con4mScope; name: string; scopeOk: bool = false): Option[\n    STEntry]
dottedLookup	con4m/st.html#dottedLookup,Con4mScope,seq[string]	st: dottedLookup(scope: Con4mScope; dotted: seq[string]): Option[STEntry]
toCon4mType	con4m/st.html#toCon4mType,string	st: toCon4mType(s: string): Con4mType
