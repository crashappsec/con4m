# This needs to migrate to github issues.

# P0: Need for current sami work
- Ability to load a stacked configuration file.
- String interpolations (This is nim-side only).
- Integrate into SAMI
- Not shitty API to it.
- codegen, need to get error definitions right.

# P1: Before going public
- The ability to add code callbacks / non-recursive procedures
- member (.) access (needed for callbacks to be usable)
- What happens w/ bad indexing?
- Should we only allow assigning to ATTRS once per file?
- Cleanup error handling massively, including error messages and what
  context gets oututted.
- Add tuples
- Add in the data type validator callback
- Currently, we do not support accessing user-defined fields from
  the data structures generated by the macros.
- Remove the echo call in spec::addSection, use the logging module.

# P2: Later is fine. Add these issues to the repo to track, when time.

- Currently, I've built this to only allow 'typing' top-level
  sections.  Meaning, you cannot have a top-level section that has
  sub-sections specific to its type. In HCL you can do both, and
  frankly I was torn on whether to allow both, or pick one. So I just
  started without real sub-sections, and figured I'd see how it goes.
  I'm now of the opinion subsections definitely need to be added, but
  it will require a significant bit of work, and I don't personally
  need them for SAMI, so this is a bit down the priority list for me.
  Currently the macro definitions can be nested, (i.e., you can have
  sections in section blocks), but when you add those macros, they
  just generate new top-level sections.  That's due to addSection()
  (in spec.nim) adding the sub-section spec to the actual config spec
  top-level.  There's a pointer from the section spec back up to
  the config spec, and this is the ONLY reason we use it; it should
  be removed once we address this issue.
  
- Add in <<END as an option for long strings
- Move strings to a resources file.
- Standalone binary to output JSON
- Read in JSON files too (using a basic translation of the AST).
- Communicate w/ an app over stdin/stdout
- Hot reloading of configs.
- TOML bindings
- What to do w/ null?
- Check dict literals for duplicate entries.  Right now they get squashed.
- Make == and != work on dicts and lists
- Make + and - work for lists and dicts.
- Curses UI for config management
- Command-line flag handling
- Ability to embed and dump configs into the actual binary itself.
